CREATE DATABASE RETAIL_ANALYTICS;
USE RETAIL_ANALYTICS;

-- PROCEDURE 1 THAT RETURNS THE TOP 10 BEST SELLING PRODUCTS BASED ON REVENUE
/*
   THE COLUMNS IN THIS PROCEDURE WILL BE-
   (PRODUCT_ID , PRODUCT_NAME , TOTAL_QUANTITY_SOLD , TOTAL_REVENUE)
*/

DELIMITER //

CREATE PROCEDURE PROC_TOP_SELLING_PRODUCTS()
BEGIN
     SELECT P.PRODUCT_ID AS PRODUCT_ID,
     P.NAME AS PRODUCT_NAME,
     SUM(F.QUANTITY) AS TOTAL_QUANTITY_SOLD,
     SUM(TOTAL_AMOUNT) AS TOTAL_REVENUE
     FROM DIM_PRODUCT P JOIN FACT_SALES F
     ON P.PRODUCT_ID=F.PRODUCT_ID
     GROUP BY P.PRODUCT_ID
     ORDER BY TOTAL_REVENUE DESC LIMIT 10;
END //

DELIMITER ;

CALL PROC_TOP_SELLING_PRODUCTS();

-- PROCEDURE 2 THAT TAKES IN CUSTOMER_ID AS INPUT AND RETURNS THE HISTORY OF ITS PURCHASES
/*
   COLUMNS IN THIS PROCEDURE WILL BE-
   (DATE , PRODUCT_NAME , STORE_NAME , QUANTITY , TOTAL_AMOUNT , MEHTOD_NAME)
*/
DELIMITER //

CREATE PROCEDURE PROC_CUSTOMER_PURCHASE_HISTORY(IN CUSTOMER_ID INT)
BEGIN
     SELECT 
     D.DATE_ID AS DATE,
     P.NAME AS PRODUCT_NAME,
     S.STORE_NAME,
     F.QUANTITY,
     F.TOTAL_AMOUNT,
     PM.METHOD_NAME AS PAYMENT_METHOD
     FROM FACT_SALES F 
     LEFT JOIN DIM_CUSTOMER C
     ON F.CUSTOMER_ID=C.CUSTOMER_ID
     LEFT JOIN DIM_PRODUCT P 
     ON F.PRODUCT_ID=P.PRODUCT_ID
     LEFT JOIN DIM_STORE S
     ON F.STORE_ID=S.STORE_ID
     LEFT JOIN DIM_DATE D
     ON F.DATE_ID=D.DATE_ID
     LEFT JOIN DIM_PAYMENT_METHOD PM
     ON F.PAYMENT_METHOD_ID=PM.PAYMENT_METHOD_ID
     WHERE F.CUSTOMER_ID=CUSTOMER_ID;
END //

DELIMITER ;

CALL PROC_CUSTOMER_PURCHASE_HISTORY(13);

-- PROCEDURE 3 RETURNS TOP 10 HIGHEST SPENDING CUSTOMERS IN THE DATABASE
/*
   COLUMNS IN THE PROCEDURE WILL BE-
   (CUSTOMER_ID , CUSTOMER_NAME , TOTAL_UNITS_PURCHASED , TOTAL_SPENT)
*/

DELIMITER //

CREATE PROCEDURE PROC_TOP_SPENDING_CUSTOMER()
BEGIN
     SELECT 
     C.CUSTOMER_ID AS CUSTOMER_ID,
     C.NAME AS CUSTOMER_NAME,
     COUNT(*) AS TOTAL_UNITS_PURCHASED,
     SUM(TOTAL_AMOUNT) AS TOTAL_SPENT
     FROM DIM_CUSTOMER C 
     INNER JOIN FACT_SALES F
     ON C.CUSTOMER_ID=F.CUSTOMER_ID
     GROUP BY C.CUSTOMER_ID
     ORDER BY TOTAL_SPENT DESC LIMIT 10;
END //

DELIMITER ;

CALL PROC_TOP_SPENDING_CUSTOMER();

-- PROCEDURE 4 RETURNS REGION WISE SALES DATA
/* 
   THE COLUMNS IN THE FUNCTION WILL BE-
   (REGION , TOTAL_SALES , TOTAL_TRANSACTION)
*/

DELIMITER //

CREATE PROCEDURE PROC_SALES_BY_REGION()
BEGIN
     SELECT
     S.REGION AS REGION,
     COUNT(*) AS TOTAL_TRANSACTION,
     SUM(F.TOTAL_AMOUNT) AS TOTAL_SALES
     FROM DIM_STORE S
     INNER JOIN FACT_SALES F
     ON S.STORE_ID=F.STORE_ID
     GROUP BY S.REGION
     ORDER BY TOTAL_SALES;
END //

DELIMITER ;


-- PROCEDURE 5 SHOWS TOTAL REVENUE PER PRODUCT CATEGO\RY, AND HOW MANY UNITS WERE SOLD IN EACH.
/*
   THE COLUMNS IN THIS PROCEDURE WILL BE-
   (CATEGORY , UNITS_SOLD , TOTAL_REVENUE)
*/

DELIMITER //

CREATE PROCEDURE PROC_CATEGORY_REVENUE_BREAKDOWN()
BEGIN
     SELECT
     P.CATEGORY AS PRODUCT_CATEGORY,
     SUM(F.QUANTITY) AS UNITS_SOLD,
     SUM(F.TOTAL_AMOUNT) AS TOTAL_REVENUE
     FROM DIM_PRODUCT P INNER JOIN
     FACT_SALES F ON
     P.PRODUCT_ID=F.PRODUCT_ID
     GROUP BY P.CATEGORY
     ORDER BY TOTAL_REVENUE DESC ;
END //

DELIMITER ;

CALL PROC_CATEGORY_REVENUE_BREAKDOWN();

-- PROCEDURE 6 WILL TRACK THE DAILY TOTAL SALES AND TOTAL RUNNING REVENUE EVERY DAY.
/*
  THE COLUMNS OF THIS PROCEDURE WILL EVENTUALLY CONTAIN-
  (DATE , DAILY_REVENUE , RUNNING TOTAL)
*/

DELIMITER //

CREATE PROCEDURE PROC_DAILY_SALES_TREND()
BEGIN 
    WITH DAILY_SALES AS(
    SELECT 
    D.DATE_ID,
    SUM(F.TOTAL_AMOUNT) AS DAILY_REVENUE
    FROM DIM_DATE D INNER JOIN FACT_SALES F
    ON D.DATE_ID=F.DATE_ID
    GROUP BY D.DATE_ID
    )
    
    SELECT 
    DATE_ID,
    DAILY_REVENUE,
    SUM(DAILY_REVENUE) OVER(ORDER BY DATE_ID) AS RUNNING_TOTAL
    FROM DAILY_SALES;
    
END //

DELIMITER ;

CALL PROC_DAILY_SALES_TREND();

-- PROCEDURE 7 WILL SHOW WEEKLY TOTAL REVENUE,TOTAL TRANSACTION AND AVG REVENUE PER TRANSACTION
/*
  THE COLUMNS OF THIS PROCEDURE WILL BE-
  (YEAR , WEEK , TOTAL_TRANSACTIONS , TOTAL_REVENUE , AVERAGE_REVENUE)
*/

DELIMITER //
CREATE PROCEDURE PROC_WEEKLY_SALES_SUMMARY()
BEGIN
    WITH WEEKLY_SALES AS(
    SELECT
    YEAR(D.DATE_ID) AS YEAR,
    WEEK(D.DATE_ID) AS WEEK,
	COUNT(*) AS TOTAL_TRANSACTIONS,
    SUM(TOTAL_AMOUNT) AS TOTAL_REVENUE,
    AVG(TOTAL_AMOUNT) AS AVERAGE_REVENUE
    FROM FACT_SALES F 
    INNER JOIN DIM_DATE D
    ON F.DATE_ID=D.DATE_ID
    GROUP BY WEEK(D.DATE_ID),YEAR(D.DATE_ID)
    )
    
    SELECT* FROM WEEKLY_SALES;
END //

DELIMITER ;

CALL PROC_WEEKLY_SALES_SUMMARY();

-- PROCEDURE 8 WILL RANK THE REVENUE 
/*
  THE COLUMN OF THIS PROCEDURE WILL HAVE TO BE-
  (PRODUCT_ID , PRODUCT_NAME , TOTAL_REVENUE , RANK)
*/

DELIMITER //

CREATE PROCEDURE PROC_PRODUCT_RANKING_BY_REVENUE()
BEGIN
	WITH PRODUCT_REVENUE AS(
    SELECT P.PRODUCT_ID,
    P.NAME,
    SUM(F.TOTAL_AMOUNT) AS TOTAL_REVENUE
    FROM DIM_PRODUCT P
    INNER JOIN FACT_SALES F
    ON P.PRODUCT_ID=F.PRODUCT_ID
    GROUP BY P.PRODUCT_ID,P.NAME
    )
    
    SELECT 
    PRODUCT_ID,
    NAME AS PRODUCT_NAME,
    TOTAL_REVENUE,
    RANK() OVER(ORDER BY TOTAL_REVENUE DESC)
    FROM PRODUCT_REVENUE;
END //

DELIMITER ;

CALL PROC_PRODUCT_RANKING_BY_REVENUE();


-- PROCEDURE 9 WILL SHOW THE MOST WIDELY USED PAYMENT METHOD BY THE CUSTOMERS
/*
   THE COLUMNS IN THIS PROCEDURE WILL BE 
   (PAYMENT_METHOD , TIMES_USED)
*/


DELIMITER //

CREATE PROCEDURE PROC_MOST_USED_PAYMENT_METHOD()
BEGIN
    SELECT 
    PM.METHOD_NAME,
    COUNT(*) AS TIMES_USED
    FROM DIM_PAYMENT_METHOD PM
    INNER JOIN FACT_SALES F ON
    PM.PAYMENT_METHOD_ID=F.PAYMENT_METHOD_ID
    GROUP BY PM.PAYMENT_METHOD_ID
    ORDER BY TIMES_USED DESC;
END //

DELIMITER ;

CALL PROC_MOST_USED_PAYMENT_METHOD();

-- PROCEDURE 10 WILL SHOW THE CUSTOMER FREQUENCY TIER ON THE BASIS OF THAT THEY WILL BE DIVIDED INTO GROUPS OF
-- FREQUENT , OCCASSIONAL AND RARE
/*
   THE COLUMNS IN THIS PROCEDURE WILL BE-
   (CUSTOMER_ID , CUSTOMER_NAME , TOTAL_PURCHASES , FREQUENCY_TIER)
*/

DELIMITER //

CREATE PROCEDURE PROC_CUSTOMER_FREQUENCY_TIER()
BEGIN
     SELECT
     C.CUSTOMER_ID,
     C.NAME,
     COUNT(*) AS TOTAL_PURCHASES,
     CASE 
         WHEN COUNT(*)>5 THEN "FREQUENT"
         WHEN COUNT(*) BETWEEN 3 AND 5 THEN "OCCASSIONAL"
         WHEN COUNT(*) <=2 THEN "RARE"
	 END AS FREQUENCY_TIER
     FROM DIM_CUSTOMER C INNER JOIN
     FACT_SALES F ON
     C.CUSTOMER_ID=F.CUSTOMER_ID
     GROUP BY C.CUSTOMER_ID,C.NAME;
END //

DELIMITER ;

CALL PROC_CUSTOMER_FREQUENCY_TIER;

-- PROCEDURE 11 SHOWS ON WHICH WEEKDAY HIGHEST REVENUE WAS GENERATED
/*
  THE COLUMNS WILL BE -
  (DATE_ID , WEEKDAY , TOTAL_REVENUE) 
*/ 

DELIMITER //

CREATE PROCEDURE PROC_PEAK_SALES_DAY()
BEGIN
    SELECT D.DATE_ID,
    DAYNAME(D.DATE_ID) AS WEEKDAY,
    SUM(F.TOTAL_AMOUNT) AS TOTAL_REVENUE
    FROM DIM_DATE D INNER JOIN 
    FACT_SALES F ON
    D.DATE_ID=F.DATE_ID
    GROUP BY D.DATE_ID;
END// 

DELIMITER ;

CALL PROC_PEAK_SALES_DAY();

-- PROCEDURE 12 WOULD ANALYSE HOW THE SALES OF A PARTICULAR PRODUCT IS VARYING DAY BY DAY(IT TAKES PRODUCT ID AS INPUT)
/*
  THE PROCEDURE WILL HAVE COLUMNS LIKE-
  (DATE , PRODUCT_NAME , UNITS_SOLD , REVENUE)
*/

DELIMITER //

CREATE PROCEDURE PROC_PRODUCT_SALES_TREND(IN PRODUCT_ID INT)
BEGIN
    SELECT D.DATE_ID,
    P.NAME AS PRODUCT_NAME,
    SUM(QUANTITY) AS UNITS_SOLD,
    SUM(TOTAL_AMOUNT) AS TOTAL_REVENUE
    FROM FACT_SALES F 
    INNER JOIN DIM_DATE D
    ON F.DATE_ID=D.DATE_ID
    INNER JOIN DIM_PRODUCT P
    ON P.PRODUCT_ID=F.PRODUCT_ID
    WHERE F.PRODUCT_ID=PRODUCT_ID
    GROUP BY D.DATE_ID,P.NAME
    ORDER BY D.DATE_ID;
END //

DELIMITER ;
    
CALL PROC_PRODUCT_SALES_TREND(110);

-- PROCEDURE 13 WILL SHOWCASE THE PERFORMANCE OF THE STORES PRESENT IN THE DATABASE
/*
  THE PROCEDURE WILL HAVE COLUMNS LIKE THE-
  (STORE_ID , STORE_NAME , TOTAL_UNITS_SOLD , TOTAL_TRANSACTIONS , TOTAL_REVENUE , AVERAGE_REVENUE_PER_TRANSACTION)
*/

DELIMITER //

CREATE PROCEDURE PROC_STORE_PERFORMANCE_SUMMARY()
BEGIN
     SELECT
     S.STORE_ID,
     S.STORE_NAME,
     SUM(F.QUANTITY) AS TOTAL_UNITS_SOLD,
     COUNT(*) AS TOTAL_TRANSACTIONS,
     SUM(F.TOTAL_AMOUNT) AS TOTAL_REVENUE,
     SUM(F.TOTAL_AMOUNT)/COUNT(*) AS AVERAGE_REVENUE_PER_TRANSACTION
     FROM DIM_STORE S 
     INNER JOIN FACT_SALES F
     ON S.STORE_ID=F.STORE_ID
     GROUP BY S.STORE_ID,S.STORE_NAME;
END //

DELIMITER ;
     
CALL PROC_STORE_PERFORMANCE_SUMMARY();